<template>
  <div class="search-result-container">
    <!-- 顶部搜索栏 -->
    <div class="search-header">
      <van-search
        v-model="keyword"
        placeholder="请输入搜索关键词"
        background="#ffffff"
        shape="round"
        show-action
        @search="onSearch"
        @cancel="onCancel"
        clearable
      >
        <template #left-icon>
          <van-icon name="arrow-left" class="back-icon" @click="onBack" />
        </template>
      </van-search>
    </div>

    <!-- 内容选项栏 -->
    <div class="content-tabs">
      <van-tabs v-model:active="activeTab" animated swipeable>
        <van-tab title="资讯">
          <!-- 筛选条件栏 -->
          <div class="filter-bar">
            <div class="filter-item" @click="showSortOptions">
              <span>{{ currentSort }}</span>
              <van-icon name="arrow-down" :class="{ 'arrow-up': showSortPopup }" />
            </div>
            <div class="filter-item" @click="showCategoryOptions">
              <span>{{ currentCategory }}</span>
              <van-icon name="arrow-down" :class="{ 'arrow-up': showCategoryPopup }" />
            </div>
          </div>

          <!-- 排序选项弹出层 -->
          <van-popup
            v-model:show="showSortPopup"
            :style="{ top: '138px' }"
            class="filter-popup"
          >
            <div class="popup-content">
              <div 
                class="popup-item" 
                v-for="(item, index) in sortOptions" 
                :key="index"
                :class="{ active: currentSort === item }"
                @click="selectSort(item)"
              >
                {{ item }}
              </div>
            </div>
          </van-popup>

          <!-- 分类选项弹出层 -->
          <van-popup
            v-model:show="showCategoryPopup"
            :style="{ top: '138px' }"
            class="filter-popup"
          >
            <div class="popup-content">
              <div 
                class="popup-item" 
                v-for="(item, index) in categoryOptions" 
                :key="index"
                :class="{ active: currentCategory === item }"
                @click="selectCategory(item)"
              >
                {{ item }}
              </div>
            </div>
          </van-popup>

          <!-- 资讯列表 -->
          <div class="news-list" v-if="newsList.length > 0">
            <div class="news-item" v-for="(item, index) in newsList" :key="index" @click="viewNewsDetail(item)">
              <div class="news-content">
                <h3 class="news-title">{{ item.title }}</h3>
                <div class="news-info">
                  <span class="source">{{ item.source }}</span>
                  <span class="time">{{ item.time }}</span>
                  <span class="comment-count">{{ item.comments }}评论</span>
                </div>
              </div>
              <div class="news-image" v-if="item.cover">
                <van-image
                  :src="item.cover"
                  fit="cover"
                  radius="4"
                  width="110"
                  height="70"
                />
              </div>
            </div>
          </div>

          <!-- 空状态 -->
          <div class="empty-state" v-else>
            <van-empty
              image="search"
              description="没有找到与搜索词相关的内容"
            />
          </div>
        </van-tab>

        <van-tab title="用户">
          <!-- 用户筛选条件栏 -->
          <div class="filter-bar">
            <div class="filter-item" @click="showUserSortOptions">
              <span>{{ currentUserSort }}</span>
              <van-icon name="arrow-down" :class="{ 'arrow-up': showUserSortPopup }" />
            </div>
            <div class="filter-item" @click="showUserTypeOptions">
              <span>{{ currentUserType }}</span>
              <van-icon name="arrow-down" :class="{ 'arrow-up': showUserTypePopup }" />
            </div>
          </div>

          <!-- 用户排序选项弹出层 -->
          <van-popup
            v-model:show="showUserSortPopup"
            :style="{ top: '138px' }"
            class="filter-popup"
          >
            <div class="popup-content">
              <div 
                class="popup-item" 
                v-for="(item, index) in userSortOptions" 
                :key="index"
                :class="{ active: currentUserSort === item }"
                @click="selectUserSort(item)"
              >
                {{ item }}
              </div>
            </div>
          </van-popup>

          <!-- 用户类型选项弹出层 -->
          <van-popup
            v-model:show="showUserTypePopup"
            :style="{ top: '138px' }"
            class="filter-popup"
          >
            <div class="popup-content">
              <div 
                class="popup-item" 
                v-for="(item, index) in userTypeOptions" 
                :key="index"
                :class="{ active: currentUserType === item }"
                @click="selectUserType(item)"
              >
                {{ item }}
              </div>
            </div>
          </van-popup>

          <!-- 用户列表 -->
          <div class="user-list" v-if="filteredUserList.length > 0">
            <div class="user-item" v-for="(item, index) in filteredUserList" :key="index">
              <van-image
                round
                width="50"
                height="50"
                :src="item.avatar"
                alt="用户头像"
              />
              <div class="user-info">
                <div class="user-name">{{ item.name }}</div>
                <div class="user-desc">{{ item.description }}</div>
                <div class="user-fans">{{ item.followers }}粉丝</div>
              </div>
              <van-button 
                size="small" 
                color="#3478F6" 
                round 
                plain
                class="follow-btn"
              >
                关注
              </van-button>
            </div>
          </div>

          <!-- 空状态 -->
          <div class="empty-state" v-else>
            <van-empty
              image="search"
              description="没有找到与搜索词相关的用户"
            />
          </div>
        </van-tab>
      </van-tabs>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, computed } from 'vue';
import { useRouter, useRoute } from 'vue-router';
import { showToast } from '../../utils/vant-ui';

const router = useRouter();
const route = useRoute();
const keyword = ref('');
const activeTab = ref(0);

// 资讯筛选相关状态
const showSortPopup = ref(false);
const showCategoryPopup = ref(false);
const currentSort = ref('默认排序');
const currentCategory = ref('全部分类');

const sortOptions = ref(['默认排序', '最新发布', '最多浏览']);
const categoryOptions = ref(['全部分类', '科技', '财经', '体育', '娱乐', '健康', '教育', '汽车', '旅游']);

// 用户筛选相关状态
const showUserSortPopup = ref(false);
const showUserTypePopup = ref(false);
const currentUserSort = ref('默认排序');
const currentUserType = ref('全部用户');

const userSortOptions = ref(['默认排序', '最新发布', '粉丝由多到少', '粉丝由少到多']);
const userTypeOptions = ref(['全部用户', '自媒体', '普通用户']);

// 模拟数据 - 资讯列表
const allNewsList = ref([
  {
    id: 1,
    title: '现在AI编程这么厉害，还有必要学代码吗？代码会被取代吗？',
    source: 'AI研究院',
    time: '2小时前',
    comments: 131,
    cover: 'https://img01.yzcdn.cn/vant/cat.jpeg',
    category: '科技'
  },
  {
    id: 2,
    title: '涨星速度起飞？超好用的AI客户端！高质量开源项目',
    source: '神秘的鱼仔',
    time: '5小时前',
    comments: 5,
    cover: 'https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg',
    category: '科技'
  },
  {
    id: 3,
    title: 'Cursor编程实战演示——用思维链方法让AI写AI提示词',
    source: 'kateAI不错',
    time: '昨天',
    comments: 7,
    cover: 'https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg',
    category: '科技'
  },
  {
    id: 4,
    title: 'AI简历优化神器！用deepseekai三分钟让HR一眼选中你！',
    source: 'LYFJSL',
    time: '前天',
    comments: 0,
    category: '职场'
  },
  {
    id: 5,
    title: 'AI优化简历的技巧与实战分享',
    source: '壹天小站',
    time: '3天前',
    comments: 2,
    cover: 'https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg',
    category: '职场'
  }
]);

// 模拟数据 - 用户列表
const allUserList = ref([
  {
    id: 1,
    name: '玄离',
    avatar: 'https://img01.yzcdn.cn/vant/cat.jpeg',
    description: 'AI优化专家 | 简历优化达人',
    followers: 12563,
    type: '自媒体',
    createTime: '2022-01-15'
  },
  {
    id: 2,
    name: 'AI写简历',
    avatar: 'https://fastly.jsdelivr.net/npm/@vant/assets/cat.jpeg',
    description: '提供AI驱动的简历优化服务',
    followers: 8754,
    type: '自媒体',
    createTime: '2022-05-20'
  },
  {
    id: 3,
    name: '简历优化专家',
    avatar: 'https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg',
    description: '10年HR经验，帮你打造完美简历',
    followers: 5489,
    type: '自媒体',
    createTime: '2023-02-10'
  },
  {
    id: 4,
    name: '程序员小王',
    avatar: 'https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg',
    description: '分享编程和AI学习心得',
    followers: 356,
    type: '普通用户',
    createTime: '2023-08-15'
  },
  {
    id: 5,
    name: 'AI爱好者',
    avatar: 'https://fastly.jsdelivr.net/npm/@vant/assets/apple-3.jpeg',
    description: '探索AI的无限可能',
    followers: 1289,
    type: '普通用户',
    createTime: '2023-11-05'
  }
]);

// 筛选后的新闻列表
const newsList = computed(() => {
  // 根据分类筛选
  let filteredList = currentCategory.value === '全部分类' 
    ? allNewsList.value 
    : allNewsList.value.filter(item => item.category === currentCategory.value);
  
  // 根据排序选项排序
  if (currentSort.value === '最新发布') {
    // 按时间排序（这里仅为示例，实际应该根据日期对象排序）
    return [...filteredList].sort((a, b) => {
      if (a.time.includes('小时') && b.time.includes('小时')) {
        return parseInt(a.time) - parseInt(b.time);
      }
      return -1; // 简化示例，实际中应该有更完善的排序逻辑
    });
  } else if (currentSort.value === '最多浏览') {
    // 按评论数排序
    return [...filteredList].sort((a, b) => b.comments - a.comments);
  }
  
  // 默认排序
  return filteredList;
});

// 筛选后的用户列表
const filteredUserList = computed(() => {
  // 根据用户类型筛选
  let filteredList = currentUserType.value === '全部用户'
    ? allUserList.value
    : allUserList.value.filter(item => item.type === currentUserType.value);

  // 根据排序选项排序
  if (currentUserSort.value === '最新发布') {
    // 按创建时间排序
    return [...filteredList].sort((a, b) => new Date(b.createTime) - new Date(a.createTime));
  } else if (currentUserSort.value === '粉丝由多到少') {
    // 按粉丝数从多到少排序
    return [...filteredList].sort((a, b) => b.followers - a.followers);
  } else if (currentUserSort.value === '粉丝由少到多') {
    // 按粉丝数从少到多排序
    return [...filteredList].sort((a, b) => a.followers - b.followers);
  }
  
  // 默认排序
  return filteredList;
});

// 在组件挂载时从路由中获取搜索关键词
onMounted(() => {
  if (route.query.keyword) {
    keyword.value = route.query.keyword;
  }
});

// 处理搜索操作
const onSearch = () => {
  if (!keyword.value.trim()) {
    showToast('请输入搜索内容');
    return;
  }
  
  // 更新搜索结果
  // 在实际应用中，这里应该调用API获取搜索结果
  showToast('搜索中...');
};

// 取消搜索
const onCancel = () => {
  router.back();
};

// 返回上一页
const onBack = () => {
  router.back();
};

// 查看新闻详情
const viewNewsDetail = (item) => {
  router.push(`/detail/${item.id}`);
};

// 资讯排序相关
const showSortOptions = () => {
  showSortPopup.value = true;
  showCategoryPopup.value = false;
  showUserSortPopup.value = false;
  showUserTypePopup.value = false;
};

const showCategoryOptions = () => {
  showCategoryPopup.value = true;
  showSortPopup.value = false;
  showUserSortPopup.value = false;
  showUserTypePopup.value = false;
};

const selectSort = (sort) => {
  currentSort.value = sort;
  showSortPopup.value = false;
};

const selectCategory = (category) => {
  currentCategory.value = category;
  showCategoryPopup.value = false;
};

// 用户排序相关
const showUserSortOptions = () => {
  showUserSortPopup.value = true;
  showUserTypePopup.value = false;
  showSortPopup.value = false;
  showCategoryPopup.value = false;
};

const showUserTypeOptions = () => {
  showUserTypePopup.value = true;
  showUserSortPopup.value = false;
  showSortPopup.value = false;
  showCategoryPopup.value = false;
};

const selectUserSort = (sort) => {
  currentUserSort.value = sort;
  showUserSortPopup.value = false;
};

const selectUserType = (type) => {
  currentUserType.value = type;
  showUserTypePopup.value = false;
};
</script>

<style scoped>
.search-result-container {
  min-height: 100vh;
  background-color: #f7f8fa;
  position: relative;
  overflow-x: hidden;
}

.search-header {
  position: sticky;
  top: 0;
  z-index: 1001;
}

.back-icon {
  font-size: 18px;
  color: #333;
  margin-right: 4px;
}

.content-tabs {
  background-color: #fff;
  position: relative;
  z-index: 2;
}

.content-tabs :deep(.van-tabs__nav) {
  background-color: #fff;
}

.content-tabs :deep(.van-tab) {
  color: #666;
  font-size: 15px;
}

.content-tabs :deep(.van-tab--active) {
  color: #3478F6;
  font-size: 15px;
  font-weight: 500;
}

.content-tabs :deep(.van-tabs__line) {
  background-color: #3478F6;
}

.filter-bar {
  position: relative;
  z-index: 3;
  position: sticky;
  top: 46px;
  background-color: #fff;
  display: flex;
  justify-content: flex-start;
  padding: 12px 16px;
  border-bottom: 1px solid #f0f0f0;
}

.filter-item {
  display: flex;
  align-items: center;
  margin-right: 24px;
  font-size: 14px;
  color: #666;
}

.filter-item .van-icon {
  margin-left: 4px;
  transition: transform 0.3s;
}

.arrow-up {
  transform: rotate(180deg);
}

.popup-content {
  background-color: #fff;
  position: relative;
  z-index: 1000;
  padding: 16px;
}

.popup-item {
  padding: 12px 0;
  font-size: 14px;
  color: #666;
  border-bottom: 1px solid #f5f5f5;
}

.popup-item.active {
  color: #3478F6;
}

.news-list, .user-list {
  position: relative;
  z-index: 1;
}

.news-list {
  padding: 0 16px;
}

.news-item {
  display: flex;
  padding: 16px 0;
  border-bottom: 1px solid #f0f0f0;
}

.news-content {
  flex: 1;
  margin-right: 12px;
}

.news-title {
  font-size: 16px;
  font-weight: 400;
  line-height: 1.4;
  color: #333;
  margin: 0 0 8px;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

.news-info {
  font-size: 12px;
  color: #999;
}

.news-info .source {
  margin-right: 8px;
}

.news-info .time, .news-info .comment-count {
  margin-right: 8px;
}

.user-list {
  padding: 0 16px;
}

.user-item {
  display: flex;
  align-items: center;
  padding: 16px 0;
  border-bottom: 1px solid #f0f0f0;
}

.user-info {
  flex: 1;
  margin-left: 12px;
}

.user-name {
  font-size: 15px;
  font-weight: 500;
  color: #333;
  margin-bottom: 4px;
}

.user-desc {
  font-size: 13px;
  color: #999;
  margin-bottom: 4px;
}

.user-fans {
  font-size: 12px;
  color: #999;
}

.follow-btn {
  height: 32px;
  padding: 0 12px;
}

.empty-state {
  padding: 40px 0;
}

/* 筛选弹出层样式 */
:deep(.filter-popup) {
  position: absolute;
  width: 100%;
  border-radius: 0;
  z-index: 1000;
}

:deep(.filter-popup) .van-popup__close-icon {
  top: 8px;
  right: 8px;
}

:deep(.van-overlay) {
  background-color: rgba(0, 0, 0, 0.7);
  z-index: 999;
}

.popup-content {
  padding: 16px;
  background-color: #fff;
}

.popup-item {
  padding: 12px 0;
  font-size: 14px;
  color: #666;
  border-bottom: 1px solid #f5f5f5;
}

.popup-item.active {
  color: #3478F6;
}

.news-list, .user-list {
  background-color: #fff;
}
</style> 